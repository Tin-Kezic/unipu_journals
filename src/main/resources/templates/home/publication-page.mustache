<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>publications</title>
    <link href="/util.css" rel="stylesheet"/>
</head>
<body>
{{>util/header}}

<div style="display: flex; justify-content: space-between; align-items: center; margin: 2rem 1.5rem 1rem 1.5rem;">
    <h1 style="font-size: 1.5rem; font-weight: 400; user-select: none;">
        publications
    </h1>
    {{#isAdmin}}
        <button id="add-publication" class="m3-button purple-button"  style="padding: 0.7rem 1.3rem; font-size: 1rem; border-radius: 0.5rem; box-shadow: none;">+ Add publication</button>
    {{/isAdmin}}
</div>

<section id="publications" style="flex-direction: row; gap: 1rem; display: flex; flex-wrap: wrap; margin: 1rem 1.5rem;">
    {{#publications}}
        <div
            data-id="{{id}}"
            class="yellow-box"
            style="cursor: pointer;"
            onclick="window.location='/publication/{{id}}'
        ">
            <p class="yellow-box-text" data-id="{{id}}">{{title}}</p>
            <div class="yellow-box-buttons">
                {{#canHide}}
                    <button
                        onclick="event.stopPropagation()"
                        data-type="hide-button"
                        data-id="{{id}}"
                        data-title="{{title}}"
                        class="m3-button purple-button"
                        style="font-size: 0.8rem; width: 3.8rem; box-shadow: none;"
                    >Hide</button>
                {{/canHide}}
                {{#canEdit}}
                    <button
                        onclick="event.stopPropagation()"
                        data-type="edit-button"
                        data-id="{{id}}"
                        data-title="{{title}}"
                        class="m3-button yellow-button"
                        style="font-size: 0.8rem; width: 3.8rem; box-shadow: none;"
                    >Edit</button>
                {{/canEdit}}
            </div>
        </div>
    {{/publications}}
</section>
<dialog id="dialog" closedby="any">
    <p id="dialog-message">Add publication</p>
    <form id="dialog-form">
        <div class="text-field">
            <label id="dialog-input-label"></label>
            <input id="dialog-input" name="dialog-input" type="text">
        </div>
        <div style="display: flex; justify-content: space-between">
            <button id="dialog-negative" class="m3-button outline-button" type="button">Cancel</button>
            <button id="dialog-positive" class="m3-button" style="box-shadow: none; padding-inline: 1.8rem; margin-left: 1rem;"></button>
        </div>
    </form>
</dialog>
</body>
<style>
    .m3-button:active {
        transform: none;
        box-shadow: none !important;
    }
</style>
<script>
    const dialog = document.getElementById('dialog');
    const dialogMessage = document.getElementById('dialog-message');
    const dialogForm = document.getElementById('dialog-form');
    const dialogInputLabel = document.getElementById('dialog-input-label');
    const dialogInput = document.getElementById('dialog-input');
    const dialogNegative = document.getElementById('dialog-negative');
    const dialogPositive = document.getElementById('dialog-positive');
    
    const editButtons = document.querySelectorAll('button[data-type="edit-button"]');
    const hideButtons = document.querySelectorAll('button[data-type="hide-button"]');
    let currentId = null;

    let currentOperation = null;

    document.getElementById('add-publication').addEventListener('click', () => {
            dialogMessage.innerHTML = `Add publication`;
            dialogInputLabel.innerHTML = 'title';
            dialogInput.style.display = 'block';
            dialogPositive.innerHTML = 'Add';
            dialogPositive.classList.add('purple-button');
            currentOperation = 'INSERT';
            dialog.showModal();
    });
    editButtons.forEach(button => {
        button.addEventListener('click', () => {
            dialogMessage.innerHTML = `edit title of <b>${button.dataset.title}</b>`;
            currentId = button.dataset.id;
            dialogInputLabel.innerHTML = 'title';
            dialogInput.style.display = 'block';
            dialogPositive.innerHTML = 'Edit';
            dialogPositive.classList.add('yellow-button');
            currentOperation = 'EDIT';
            dialog.showModal();
        });
    });
    hideButtons.forEach(button => {
        button.addEventListener('click', () => {
            dialogMessage.innerHTML = `Hide <b>${button.dataset.title}</b>?`;
            currentId = button.dataset.id;
            dialogInputLabel.innerHTML = '';
            dialogInput.style.display = 'none';
            dialogPositive.innerHTML = 'Hide';
            dialogPositive.classList.add('red-button');
            currentOperation = 'HIDE';
            dialog.showModal();
        });
    });
    dialogNegative.addEventListener('click', () => {
        dialogPositive.classList.remove('purple-button', 'yellow-button', 'red-button');
        dialog.close()
    });
    dialogForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        const inputValue = document.querySelector('input[name=dialog-input]').value;
        switch(currentOperation) {
            case 'INSERT':
                const insertResponse = await fetch(`/api/publication/insert?title=${encodeURIComponent(inputValue)}`, { method: 'POST' });
                if(!insertResponse.ok) { alert('failed to add publication'); return; }
                location.reload(true);
            break;
            case 'EDIT':
                const editResponse = await fetch(`/api/publication/${currentId}/update-title?title=${encodeURIComponent(inputValue)}`, { method: 'PUT' });
                if(!editResponse.ok) { alert('failed to update publication title'); return; }
                location.reload(true);
            break;
            case 'HIDE':
                const hideResponse = await fetch(`/api/publication/${currentId}/update-hidden?isHidden=true`, { method: 'PUT' });
                if(!hideResponse.ok) { alert('failed to hide publication'); return; }
                const publication = document.querySelector(`div[data-id="${currentId}"]`);
                if(publication) publication.remove();
                dialog.close();
                dialogPositive.classList.remove('red-button');
            break;
            default: alert('invalid current-operation'); return;
        }
    });
</script>
</html>